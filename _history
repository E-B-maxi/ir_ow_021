{"entries":[{"timestamp":1747069597572,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"custom.ts","patch":[{"diffs":[[0,"rstPulses = "],[-1,"0"],[1,"1"],[0,"\nconst debug"]],"start1":539,"start2":539,"length1":25,"length2":25}]},{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"es><"],[-1,"variable id=\"U}(SF;-h@np1s5mAsh(l\">Zeile</variable><"],[0,"/var"]],"start1":63,"start2":63,"length1":60,"length2":8},{"diffs":[[0," x=\""],[-1,"3"],[0,"2"],[1,"21"],[0,"\" y=\"-"],[-1,"32"],[1,"15"],[0,"3\"><"]],"start1":106,"start2":106,"length1":18,"length2":19},{"diffs":[[0,"pe=\""],[-1,"onReceivedIR\" x=\"677\" y=\"-52\"><comment pinned=\"false\" h"],[1,"pxt-on-start\" x"],[0,"=\""],[-1,"8"],[0,"0\" "],[-1,"w=\"160\">ahem, main ...</comment"],[1,"y=\"0\""],[0,"><st"]],"start1":776,"start2":776,"length1":100,"length2":33},{"diffs":[[0,"ock "],[-1,"type=\"oledssd1306_clear_display\"><next><block "],[0,"type"]],"start1":835,"start2":835,"length1":54,"length2":8},{"diffs":[[0," name=\"value\">0x"],[-1,"00"],[0,"ff"],[1,"00"],[0,"00</field></shad"]],"start1":1019,"start2":1019,"length1":36,"length2":36},{"diffs":[[0," name=\"value\">0x"],[-1,"00"],[0,"ff"],[1,"00"],[0,"00</field></shad"]],"start1":1126,"start2":1126,"length1":36,"length2":36},{"diffs":[[0," name=\"value\">0x"],[-1,"00"],[0,"ff"],[1,"00"],[0,"00</field></shad"]],"start1":1233,"start2":1233,"length1":36,"length2":36},{"diffs":[[0,"pe=\""],[-1,"oledssd1306_write_string\"><value name=\"s\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\"></field></shadow><block type=\"getRecType\"></block></value><next><block type=\"oledssd1306_write_string"],[1,"device_pause"],[0,"\"><v"]],"start1":1295,"start2":1295,"length1":227,"length2":20},{"diffs":[[0,"e name=\""],[-1,"s"],[1,"pause"],[0,"\"><shado"]],"start1":1318,"start2":1318,"length1":17,"length2":21},{"diffs":[[0,"e=\"t"],[-1,"ext\" disabled-reasons=\"MANUALLY_DISABLED"],[1,"imePicker"],[0,"\"><f"]],"start1":1344,"start2":1344,"length1":48,"length2":17},{"diffs":[[0,"me=\""],[-1,"TEXT\">"],[1,"ms\">500"],[0,"</fi"]],"start1":1368,"start2":1368,"length1":14,"length2":15},{"diffs":[[0,"ow><"],[-1,"block type=\"getMessage\"></block></value><next><block type=\"variables_change\"><field name=\"VAR\" id=\"U}(SF;-h@np1s5mAsh(l\">Zeile</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value"],[1,"/value><next><block type=\"setREC_pin\"><field name=\"myPin\">DigitalPin.C16</field"],[0,"></b"]],"start1":1393,"start2":1393,"length1":232,"length2":87},{"diffs":[[0,"k></"],[-1,"next></block></next></block></"],[0,"stat"]],"start1":1513,"start2":1513,"length1":38,"length2":8},{"diffs":[[0,"pe=\""],[-1,"pxt-on-start"],[1,"onReceivedIR"],[0,"\" x=\""],[1,"76"],[0,"3"],[-1,"2"],[0,"\" y=\""],[-1,"56\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"U}(SF;-h@np1s5mAsh(l\">Zeile</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"oledssd1306_init"],[1,"10\"><comment pinned=\"false\" h=\"80\" w=\"160\">ahem, main ...</comment><statement name=\"HANDLER\"><block type=\"device_clear"],[0,"_dis"]],"start1":1544,"start2":1544,"length1":273,"length2":151},{"diffs":[[0," name=\"value\">0x"],[-1,"ff"],[0,"00"],[1,"ff"],[0,"00</field></shad"]],"start1":1894,"start2":1894,"length1":36,"length2":36},{"diffs":[[0," name=\"value\">0x"],[-1,"ff"],[0,"00"],[1,"ff"],[0,"00</field></shad"]],"start1":2001,"start2":2001,"length1":36,"length2":36},{"diffs":[[0," name=\"value\">0x"],[-1,"ff"],[0,"00"],[1,"ff"],[0,"00</field></shad"]],"start1":2108,"start2":2108,"length1":36,"length2":36},{"diffs":[[0,"ce_p"],[-1,"ause\"><value name=\"pause"],[1,"rint_message\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"1\" _input_init=\"true\"></mutation><value name=\"text\"><block type=\"getRecType\"></block></value><value name=\"interval"],[0,"\"><s"]],"start1":2178,"start2":2178,"length1":32,"length2":194},{"diffs":[[0,"hadow type=\""],[-1,"timePick"],[1,"math_numb"],[0,"er\"><field n"]],"start1":2372,"start2":2372,"length1":32,"length2":33},{"diffs":[[0,"r\"><field name=\""],[-1,"ms\">5"],[1,"NUM\">2"],[0,"00</field></shad"]],"start1":2394,"start2":2394,"length1":37,"length2":38},{"diffs":[[0,"pe=\""],[-1,"setREC_pin\"><field name=\"myPin\">DigitalPin.C16</field></block></next"],[1,"device_print_message\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"1\" _input_init=\"true\"></mutation><value name=\"text\"><block type=\"getMessage\"></block></value><value name=\"interval\"><shadow type=\"math_number\"><field name=\"NUM\">200</field></shadow></value"],[0,"></b"]],"start1":2458,"start2":2458,"length1":76,"length2":276}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"oledssd1306.clearDisplay"],[1,"basic.clearScreen"],[0,"()\n "]],"start1":48,"start2":48,"length1":32,"length2":25},{"diffs":[[0,"00)\n    "],[-1,"oledssd1306.write"],[1,"basic.show"],[0,"String(I"]],"start1":121,"start2":121,"length1":33,"length2":26},{"diffs":[[0,"pe()"],[1,", 200"],[0,")\n    "],[-1,"oledssd1306.write"],[1,"basic.show"],[0,"Stri"]],"start1":157,"start2":157,"length1":31,"length2":29},{"diffs":[[0,"ge()"],[-1,")\n    Zeile += 1\n})\nlet Zeile = 0\noledssd1306.initDisplay("],[1,", 200)\n}"],[0,")\nba"]],"start1":200,"start2":200,"length1":66,"length2":16}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"pxt-oled-ssd1306\": \"github:mkleinsb/pxt-oled-ssd1306#v1.0.1\""],[0,"\n   "]],"start1":106,"start2":106,"length1":79,"length2":8}]}]},{"timestamp":1747069950538,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ms\">1000"],[1,"0"],[0,"</field>"]],"start1":287,"start2":287,"length1":16,"length2":17},{"diffs":[[0," x=\""],[-1,"511"],[1,"677"],[0,"\" y=\"-"],[-1,"70"],[1,"52"],[0,"\"><c"]],"start1":844,"start2":844,"length1":19,"length2":19},{"diffs":[[0,"/block></value><"],[1,"next><block type=\"variables_change\"><field name=\"VAR\" id=\"U}(SF;-h@np1s5mAsh(l\">Zeile</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><"],[0,"/block></next></"]],"start1":1819,"start2":1819,"length1":32,"length2":217},{"diffs":[[0,"/next></block></"],[1,"next></block></"],[0,"statement></bloc"]],"start1":2058,"start2":2058,"length1":32,"length2":47},{"diffs":[[0,"HANDLER\"><block "],[1,"type=\"variables_set\"><field name=\"VAR\" id=\"U}(SF;-h@np1s5mAsh(l\">Zeile</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block "],[0,"type=\"oledssd130"]],"start1":2165,"start2":2165,"length1":32,"length2":214},{"diffs":[[0,"/next></block></"],[1,"next></block></"],[0,"statement></bloc"]],"start1":3085,"start2":3085,"length1":32,"length2":47}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"sage())\n"],[-1,"})"],[1,"    Zeile += 1\n})\nlet Zeile = 0"],[0,"\noledssd"]],"start1":214,"start2":214,"length1":18,"length2":47},{"diffs":[[0,"use(1000"],[1,"0"],[0,")\n    ba"]],"start1":418,"start2":418,"length1":16,"length2":17}]}]},{"timestamp":1747070516416,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"er\" "],[-1,"id=\"6dba6_2u.)f{i6F#zBls\" x=\"0"],[1,"x=\"32"],[0,"\" y=\"-3"],[-1,"79"],[1,"23"],[0,"\"><s"]],"start1":155,"start2":155,"length1":47,"length2":22},{"diffs":[[0,"use\""],[-1," id=\"(`Q%|i#{Q6L1d.a}Jj7Q\""],[0,"><va"]],"start1":223,"start2":223,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"_yvm;6g3lF+gpv7z%=8J\""],[0,"><fi"]],"start1":269,"start2":269,"length1":34,"length2":8},{"diffs":[[0,"ors\""],[-1," id=\"l]kAe)y#05T%vh7haO}@\""],[0,"><mu"]],"start1":357,"start2":357,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"[K@6BKSV!G*2a4^]F8yD\""],[0,"><fi"]],"start1":502,"start2":502,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"mrqKRz36X|!ul;$vO]^.\""],[0,"><fi"]],"start1":609,"start2":609,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"Ta]`p7Y+5I-`CEQ;d*t|\""],[0,"><fi"]],"start1":716,"start2":716,"length1":34,"length2":8},{"diffs":[[0,"IR\" "],[-1,"id=\"cJIRQ{wDgTsXF,[k/UCN\" x=\"479"],[1,"x=\"511"],[0,"\" y=\"-"],[-1,"126"],[1,"70"],[0,"\"><c"]],"start1":840,"start2":840,"length1":49,"length2":22},{"diffs":[[0,"lay\""],[-1," id=\"la_n|S#]QQ}(Z=Bcs[2o\""],[0,"><ne"]],"start1":984,"start2":984,"length1":34,"length2":8},{"diffs":[[0,"ors\""],[-1," id=\"d;u`-t1X^?*`Fn=P:m^2\""],[0,"><mu"]],"start1":1026,"start2":1026,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"[dX`=r9[lwNLHQv6ERH8\""],[0,"><fi"]],"start1":1171,"start2":1171,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"dG(HoI78*$VR8`6e,nD6\""],[0,"><fi"]],"start1":1278,"start2":1278,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"=R{J#2`!I2sw[.glr~$[\""],[0,"><fi"]],"start1":1385,"start2":1385,"length1":34,"length2":8},{"diffs":[[0,"ing\""],[-1," id=\"`?{xxDiLZdVB5^s~9?9b\""],[0,"><va"]],"start1":1483,"start2":1483,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"dPS+P+9DE#sSxodjKult\""],[0," dis"]],"start1":1519,"start2":1519,"length1":34,"length2":8},{"diffs":[[0,"ype\""],[-1," id=\"TUC6gqJv*Qe(t11XcfQ:\""],[0,"></b"]],"start1":1617,"start2":1617,"length1":34,"length2":8},{"diffs":[[0,"ing\""],[-1," id=\"/v/iw_1^lgH9uTo(A~Km\""],[0,"><va"]],"start1":1678,"start2":1678,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"]3{DA-/2NMn;~GMO|:.O\""],[0," dis"]],"start1":1714,"start2":1714,"length1":34,"length2":8},{"diffs":[[0,"age\""],[-1," id=\"DfhA#fc-IGKCBMX2Gs`0\""],[0,"></b"]],"start1":1812,"start2":1812,"length1":34,"length2":8},{"diffs":[[0,"art\""],[-1," id=\"Y?/,m|3nXD%]h}DL6[^T\""],[0," x=\""],[-1,"0"],[1,"32"],[0,"\" y=\""],[-1,"0"],[1,"56"],[0,"\"><s"]],"start1":1928,"start2":1928,"length1":45,"length2":21},{"diffs":[[0,"lay\""],[-1," id=\",~eHbDmNYj%0`3(FvWPL\""],[0,"><ne"]],"start1":2007,"start2":2007,"length1":34,"length2":8},{"diffs":[[0,"ors\""],[-1," id=\"yTNLd{TZ,;PAZNUWGe{R\""],[0,"><mu"]],"start1":2049,"start2":2049,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"%J)zF16[~/]ZLu;j7b*z\""],[0,"><fi"]],"start1":2194,"start2":2194,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"RRvaH+Azlz(c2)tPJ1B-\""],[0,"><fi"]],"start1":2301,"start2":2301,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"CH{PYTmjm`]sA}V*LvyR\""],[0,"><fi"]],"start1":2408,"start2":2408,"length1":34,"length2":8},{"diffs":[[0,"use\""],[-1," id=\"nECi7*d7!0-0gLK/zXz(\""],[0,"><va"]],"start1":2494,"start2":2494,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"EU!|u[#rooC]jTZgjF)[\""],[0,"><fi"]],"start1":2540,"start2":2540,"length1":34,"length2":8},{"diffs":[[0,"pin\""],[-1," id=\"8Wd~3Ih7_[NrtxO:Oq|^\""],[0,"><fi"]],"start1":2616,"start2":2616,"length1":34,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"IR_OW_0."],[-1,"2."],[0,"1\",\n    "]],"start1":15,"start2":15,"length1":18,"length2":16},{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":290,"start2":290,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// Hier kann man Tests durchführen; diese Datei wird nicht kompiliert, wenn dieses Paket als Erweiterung verwendet wird.\n"}]}],"snapshots":[{"timestamp":1747069597571,"editorVersion":"7.0.3","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"221\" y=\"-153\"><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"device_set_led_colors\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"color1\"><shadow type=\"colorNumberPicker\"><field name=\"value\">0x000000</field></shadow></value><value name=\"color2\"><shadow type=\"colorNumberPicker\"><field name=\"value\">0x000000</field></shadow></value><value name=\"color3\"><shadow type=\"colorNumberPicker\"><field name=\"value\">0x00ff00</field></shadow></value></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_set_led_colors\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"color1\"><shadow type=\"colorNumberPicker\"><field name=\"value\">0xff0000</field></shadow></value><value name=\"color2\"><shadow type=\"colorNumberPicker\"><field name=\"value\">0xff0000</field></shadow></value><value name=\"color3\"><shadow type=\"colorNumberPicker\"><field name=\"value\">0xff0000</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"setREC_pin\"><field name=\"myPin\">DigitalPin.C16</field></block></next></block></next></block></statement></block><block type=\"onReceivedIR\" x=\"763\" y=\"10\"><comment pinned=\"false\" h=\"80\" w=\"160\">ahem, main ...</comment><statement name=\"HANDLER\"><block type=\"device_clear_display\"><next><block type=\"device_set_led_colors\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"color1\"><shadow type=\"colorNumberPicker\"><field name=\"value\">0x00ff00</field></shadow></value><value name=\"color2\"><shadow type=\"colorNumberPicker\"><field name=\"value\">0x00ff00</field></shadow></value><value name=\"color3\"><shadow type=\"colorNumberPicker\"><field name=\"value\">0x00ff00</field></shadow></value><next><block type=\"device_print_message\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"1\" _input_init=\"true\"></mutation><value name=\"text\"><block type=\"getRecType\"></block></value><value name=\"interval\"><shadow type=\"math_number\"><field name=\"NUM\">200</field></shadow></value><next><block type=\"device_print_message\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"1\" _input_init=\"true\"></mutation><value name=\"text\"><block type=\"getMessage\"></block></value><value name=\"interval\"><shadow type=\"math_number\"><field name=\"NUM\">200</field></shadow></value></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"","custom.ts":"// (NEC) InfraRed receiver, experimental\n// Version 30-04-2025\n//    test code with\n//    embedded library code\n//    adopted for and tested with/on\n//      KY-022, Grove - IR Receiver (TSOP384) and Calliope mini 3\n//    additional debug messages/output\n//\n// Some of the library code is based on/derived from:\n// MakeCode blocks for Infrared\n// Original Code by 劉正吉 https://github.com/lioujj/pxt-IR\n// MIT License\n// Changes for Calliope Mini by M. Klein\n//\n\n//% weight=0 color=#87bc4b icon=\"\\uf1eb\" block=\"Infrarot IR\"\n\nconst debugShowFirstPulses = 1\nconst debugShowPulseDuration = 0\nconst debugShowUniquePulses = 0\nconst tic = 160\nnamespace IR {\n    const enum NEC {\n        // (pulse) durations in microseconds\n        startHigh = 9000, // protocol type encoding\n        startLow = 4500,\n        stopHigh = 560,   // end of message encoding\n        stopLow = 0,      // actually low for longer than max of all nnnLow\n        trueHigh = 560,   // bit 1 encoding\n        trueLow = 1690,\n        falseHigh = 560,  // bit 0 encoding\n        falseLow = 560,\n        interval = 110000 // for one message\n    }\n\n    let callBack: Action;\n    let receiverStarted = false;\n    let highLowDuration: number[] = []\n    let received = false\n    // let first = true\n    let rec_Type = \"\"\n    let messageStr = \"\"\n    let recPin = DigitalPin.C16\n\n    /**\n     *  set the IR receiver pin.\n     */\n    //% blockId=setREC_pin block=\"Infrarotempfänger an Pin %myPin\" blockExternalInputs=false\n    //% weight=85 blockGap=10\n    //% myPin.fieldEditor=\"gridpicker\" myPin.fieldOptions.columns=4\n    //% myPin.fieldOptions.tooltips=\"false\" myPin.fieldOptions.width=\"300\"\n    export function setREC_pin(myPin: DigitalPin) {\n        recPin = myPin;\n        //        pins.setEvents(recPin, PinEventType.Pulse)\n        //        pins.setPull(recPin, PinPullMode.PullUp)\n        //        pins.onPulsed(recPin, PulseValue.Low, function () {\n        //            highLowDuration.push(pins.pulseDuration())\n        //        })\n        //        pins.onPulsed(recPin, PulseValue.High, function () {\n        //            highLowDuration.push(pins.pulseDuration())\n        //        })\n\n        receiverStarted = true;\n        control.inBackground(function () {\n            // Low, high pulse and duration detection\n            // Version 28-04-2025\n            // Note, only for more than one pulse within 4.5 ms (otherwise a\n            //       [NEC] stop is detected) some low duration time will be\n            //       printed;\n            //\n            // recPin: (digital) pin, global\n            // tic: micro seconds\n            // for the used IR receiver it seems if the Pin is low it received\n            // a high pulse\n            // mode: 0 == down => high pulse\n            // 1 = up => low pulse\n            // modeTics: tics per mode\n            // highLowDuration: sequence of durations for observed pulses starting with first seen high pulse\n            // Polling is used rather than events; this should not cause any\n            // problem, because there is nothing else to be done, here.\n            // 80 is a divisor of all NEC pulse durations.\n            // 160 is a possible compromise that results in\n            // closer to the expected NEC pulse durations.\n            let modeTics: number[] = []\n            // const tic = 80\n            const minLowStop = Math.idiv(4500, tic)\n            let mode\n            let lastMode = PinPullMode.PullUp\n            while (true) {\n                modeTics = [0, 0]\n                pins.setPull(recPin, lastMode)\n                // wait for first high pulse\n                // Again, here pin is up for low pulse, pin is down for high pulse.\n                do {\n                    mode = pins.digitalReadPin(recPin)\n                    control.waitMicros(tic)\n                } while (mode == lastMode)\n                modeTics[mode] = 1\n                lastMode = mode\n                // Process tics until there are more than 8 NEC spaces (562.5 micro second\n                // units); that is, pin is low for more than 4500 micro seconds;\n                // for example, check for more than 90 tics of 50 micro seconds;\n                // this low duration is not recorded.\n                // Again, here pin is up for low pulse, pin is down for high pulse.\n                while (true) {\n                    mode = pins.digitalReadPin(recPin)\n                    modeTics[mode]++\n                    if (mode != lastMode) {\n                        highLowDuration.push(modeTics[lastMode] * tic)\n                        modeTics[lastMode] = 0\n                        lastMode = mode\n                    }\n                    if (modeTics[PinPullMode.PullUp] > minLowStop) {\n                        break;\n                    }\n                    control.waitMicros(tic)\n                }\n                received = true\n                decodeIR();\n            }\n        })\n    }\n\n    function convertHexStrToNum(myMsg: string): number {\n        let myNum = 0\n        for (let i = 0; i < myMsg.length; i++) {\n            if ((myMsg.charCodeAt(i) > 47) && (myMsg.charCodeAt(i) < 58)) {\n                myNum += (myMsg.charCodeAt(i) - 48) * (16 ** (myMsg.length - 1 - i))\n            } else if ((myMsg.charCodeAt(i) > 96) && (myMsg.charCodeAt(i) < 103)) {\n                myNum += (myMsg.charCodeAt(i) - 87) * (16 ** (myMsg.length - 1 - i))\n            } else if ((myMsg.charCodeAt(i) > 64) && (myMsg.charCodeAt(i) < 71)) {\n                myNum += (myMsg.charCodeAt(i) - 55) * (16 ** (myMsg.length - 1 - i))\n            } else {\n                myNum = 0\n                break\n            }\n        }\n        return myNum\n    }\n\n    function resetReceiver() {\n        highLowDuration = []\n        received = false\n    }\n\n    function decodeIR() {\n        let addr = 0\n        let command = 0\n        messageStr = \"\"\n        rec_Type = \"\"\n        if (debugShowFirstPulses) {\n            // Show first ... high/low durations/intervals\n            basic.setLedColors(0x00ff00, 0x000000, 0x000000)\n            for (let i = 0; i < Math.min(2, highLowDuration.length); i++) {\n                basic.showString(\"*\", 200)\n                basic.showNumber(highLowDuration[i])\n            }\n            basic.setLedColors(0x000000, 0x000000, 0x000000)\n        }\n        if (debugShowPulseDuration) {\n            basic.setLedColors(0x000000, 0x00ff00, 0x000000)\n            //  Show start duration, end duration and total duration\n            //  // basic.showString(\"=\", 400)\n            //  // basic.showNumber(highLowDuration[0])\n            //  // basic.showString(\"=\", 400)\n            //  // basic.showNumber(highLowDuration[highLowDuration.length-1])\n            basic.showString(\"=\", 400)\n            let total = 0\n            for (let i = 0; i < highLowDuration.length; i++) {\n                total += highLowDuration[i]\n            }\n            basic.showNumber(total)\n        }\n        if (debugShowUniquePulses) {\n            // Show all unique high/low durations/intervals\n            let delta: number[] = []\n            for (let i = 0; i < highLowDuration.length; i++) {\n                let found = 0;\n                for (let j = 0; j < delta.length; j++) {\n                    if (delta[j] == highLowDuration[i]) {\n                        found = 1;\n                        break\n                    }\n                }\n                if (found == 0) {\n                    delta.push(highLowDuration[i])\n                }\n            }\n\n            basic.setLedColors(0x000000, 0x000000, 0x00ff00)\n            for (let i = 0; i < delta.length; i++) {\n                basic.showString(\"|\", 400)\n                basic.showNumber(delta[i])\n            }\n        }\n        basic.pause(200)\n        let idelta = 500\n        if (((highLowDuration[0] + highLowDuration[1]) > NEC.startHigh + NEC.startLow - idelta) && ((highLowDuration[0] + highLowDuration[1]) < NEC.startHigh + NEC.startLow + idelta)) {\n            rec_Type = \"NEC\"\n            highLowDuration.removeAt(1)\n            highLowDuration.removeAt(0)\n            addr = pulseToDigit(0, 15, 1600) // NEC.trueLow - 90 ?\n            command = pulseToDigit(16, 31, 1600)\n            messageStr = convertNumToHexStr(addr, 4) + convertNumToHexStr(command, 4)\n        } else {\n            rec_Type = \"UNKNOWN\"\n        }\n        if (callBack)\n            callBack();\n        resetReceiver();\n    }\n\n    function pulseToDigit(beginBit: number, endBit: number, duration: number): number {\n        let myNum = 0\n        for (let i = beginBit; i <= endBit; i++) {\n            myNum <<= 1\n            if ((highLowDuration[i * 2] + highLowDuration[i * 2 + 1]) < duration) {\n                myNum += 0\n            } else {\n                myNum += 1\n            }\n        }\n        return myNum\n    }\n\n    function convertNumToHexStr(myNum: number, digits: number): string {\n        let tempDiv = 0\n        let tempMod = 0\n        let myStr = \"\"\n        tempDiv = myNum\n        while (tempDiv > 0) {\n            tempMod = tempDiv % 16\n            if (tempMod > 9) {\n                myStr = String.fromCharCode(tempMod - 10 + 97) + myStr\n            } else {\n                myStr = tempMod + myStr\n            }\n            tempDiv = tempDiv >> 4\n        }\n        while (myStr.length != digits) {\n            myStr = \"0\" + myStr\n        }\n        return myStr\n    }\n\n    /**\n     * Do something when a receive IR\n     */\n    //% blockId=onReceivedIR block=\"wenn IR Code empfangen\" blockInlineInputs=true\n    //% weight=70 blockGap=10\n    export function onReceivedIR(aFunction: Action): void {\n        callBack = aFunction\n    }\n\n    /**\n     * return the encoding type of the received IR \n     */\n    //% blockId=getRecType block=\"die empfangene IR Codierung\"\n    //% weight=60 blockGap=10\n    export function getRecType(): string {\n        return rec_Type\n    }\n\n    /**\n     * return the message of the received IR \n     */\n    //% blockId=getMessage block=\"die empfangene IR Nachricht\"\n    //% weight=60 blockGap=10\n    export function getMessage(): string {\n        return messageStr\n    }\n}\n\n","pxt.json":"{\n    \"name\": \"IR_OW_0.1\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"v3\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v7.0.3\",\n        \"tag\": \"v7.0.3\",\n        \"commits\": \"https://github.com/microsoft/pxt-calliope/commits/283622410ab91b26f46d68145d9ea311cb8e91dd\",\n        \"target\": \"7.0.3\",\n        \"pxt\": \"10.2.39\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[],"lastSaveTime":1747071011331}